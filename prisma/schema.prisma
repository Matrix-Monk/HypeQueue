// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String  @id @default(uuid())
  name      String?
  username  String?  @unique
  email     String?  @unique
  image     String?
  emailVerified DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  password  String?  // Not required when login with google
  rooms     Room[]   


  accounts  Account[] //  Required for next-auth logins
  sessions  Session[] //  Required for session management
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}


model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Room {
  id        String  @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  hostId    String
  host      User    @relation(fields: [hostId], references: [id], onDelete: Cascade) // Room gets deleted when user deletes account
  guests    Guest[]
  songs     Song[]
}

model Guest {
  id        String  @id @default(uuid())
  nickname  String? @default("")
  createdAt DateTime @default(now())
  roomId    String
  room      Room    @relation(fields: [roomId], references: [id], onDelete: Cascade) //  Guests gets deleted when room is deleted
  votes     Vote[]
}

model Song {
  id        String  @id @default(uuid())
  title     String
  artist    String
  url       String
  roomId    String
  room      Room    @relation(fields: [roomId], references: [id], onDelete: Cascade) // Songs gets deleted when room is deleted
  votes     Vote[]
}

model Vote {
  id      String  @id @default(uuid())
  songId  String
  song    Song    @relation(fields: [songId], references: [id], onDelete: Cascade) //  Votes gets deleted when song is deleted
  guestId String
  guest   Guest  @relation(fields: [guestId], references: [id], onDelete: Cascade) //  Votes deleted when guest leaves
}

enum Provider{
  Google
  Email
}
